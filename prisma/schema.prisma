// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id
  login String @unique
  password String
  version Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Artist {
  id String @id
  name String
  grammy Boolean
  albums Album[]
  track Track []
  favorites ArtistInFavorites[]
  @@map("artists")
}

model Album {
  id String @id
  name String
  year Int
  artistId String?
  artist Artist? @relation(fields: [artistId], references: [id], onDelete: SetNull)
  tracks Track[]
  favorites AlbumInFavorites[]
}

model Track {
  id String @id
  name String
  artistId String?
  artist Artist? @relation(fields: [artistId], references: [id], onDelete: SetNull)
  albumId String?
  album Album? @relation(fields: [albumId], references: [id], onDelete: SetNull)
  duration Int
  favorites TrackInFavorites[]
}

model ArtistInFavorites {
  artistId String
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  favorites Favorites @relation(fields: [favoritesId], references: [id], onDelete: Cascade)
  favoritesId String

  @@id([artistId, favoritesId])
}

model AlbumInFavorites {
  albumId String @unique
  album Album @relation(fields: [albumId], references: [id], onDelete: Cascade)
  favorites Favorites @relation(fields: [favoritesId], references: [id], onDelete: Cascade)
  favoritesId String

  @@id([albumId, favoritesId])
}

model TrackInFavorites {
  trackId String @unique
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
  favorites Favorites @relation(fields: [favoritesId], references: [id], onDelete: Cascade)
  favoritesId String

  @@id([trackId, favoritesId])
}
model Favorites {
  id String @unique
  artists ArtistInFavorites[]
  albums AlbumInFavorites[]
  tracks TrackInFavorites[]
}